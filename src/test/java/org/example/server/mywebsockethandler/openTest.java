package org.example.server.mywebsockethandler;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.example.server.MyWebSocketHandler;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class openTest {
    private static ObjectMapper mapper = new ObjectMapper();
    MyWebSocketHandler myHandler = MyWebSocketHandler.getInstance();
    WebSocketSession mockSession;

    private String wrapMethodJson(String hash){
        ObjectNode wrappedData = mapper.createObjectNode();
        wrappedData.put("method", "open");
        wrappedData.put("hash", hash);

        return wrappedData.toString();
    }

    @AfterEach
    public void tearDown(){
        myHandler.uninitializedSessionMap.clear();
        myHandler.sessionMap.clear();
        myHandler.sessionHashValue.clear();
    }

    @Test
    @DirtiesContext
    public void firstSession(){
        mockSession = Mockito.mock(WebSocketSession.class);
        myHandler.handleTextMessage(mockSession, new TextMessage(wrapMethodJson("hashValue")));
        assertEquals("hashValue", myHandler.sessionHashValue.get(mockSession.hashCode()));
        assertEquals(1, myHandler.sessionMap.get("hashValue").size());
        myHandler.afterConnectionClosed(mockSession, null);
        assertNull(myHandler.sessionMap.get("hashValue"));
    }

    @Test
    @DirtiesContext
    public void twoSession_SameHashValue_WithoutInitialize(){
        WebSocketSession mockSession1 = Mockito.mock(WebSocketSession.class);
        myHandler.handleTextMessage(mockSession1, new TextMessage(wrapMethodJson("hashValue")));
        assertEquals("hashValue", myHandler.sessionHashValue.get(mockSession1.hashCode()));
        assertEquals(1, myHandler.sessionMap.get("hashValue").size());

        WebSocketSession mockSession2 = Mockito.mock(WebSocketSession.class);
        myHandler.handleTextMessage(mockSession2, new TextMessage(wrapMethodJson("hashValue")));
        assertEquals("hashValue", myHandler.sessionHashValue.get(mockSession2.hashCode()));
        assertEquals(1, myHandler.sessionMap.get("hashValue").size());
        assertEquals(1, myHandler.uninitializedSessionMap.get("hashValue").size());

        myHandler.afterConnectionClosed(mockSession1, null);
        assertEquals(0, myHandler.sessionMap.get("hashValue").size());
        myHandler.afterConnectionClosed(mockSession2, null);
        assertEquals(0, myHandler.uninitializedSessionMap.get("hashValue").size());
    }

    @Test
    @DirtiesContext
    public void twoSession_DiffHashValue(){
        WebSocketSession mockSession1 = Mockito.mock(WebSocketSession.class);
        myHandler.handleTextMessage(mockSession1, new TextMessage(wrapMethodJson("hashValue1")));
        assertEquals("hashValue1", myHandler.sessionHashValue.get(mockSession1.hashCode()));
        assertEquals(1, myHandler.sessionMap.get("hashValue1").size());

        WebSocketSession mockSession2 = Mockito.mock(WebSocketSession.class);
        myHandler.handleTextMessage(mockSession2, new TextMessage(wrapMethodJson("hashValue2")));
        assertEquals("hashValue2", myHandler.sessionHashValue.get(mockSession2.hashCode()));
        assertEquals(1, myHandler.sessionMap.get("hashValue2").size());

        myHandler.afterConnectionClosed(mockSession1, null);
        assertEquals(0, myHandler.sessionMap.get("hashValue1").size());
        myHandler.afterConnectionClosed(mockSession2, null);
        assertEquals(0, myHandler.sessionMap.get("hashValue2").size());
    }
}
